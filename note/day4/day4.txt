第一周 Day 4：生成器与迭代器深度解析
今天我们要探索 Python 中另一个优雅且强大的特性 - 生成器和迭代器。这是内存高效编程的核心技术！第一周 Day 4：生成器与迭代器深度解析Code """
第一周 Day 4：生成器与迭代器深度解析
学习目标：掌握迭代器协议，理解生成器原理，学会内存高效编程

今日重点：
1. 迭代器协议的完整理解
2. 生成器函数 vs 生成器表达式
3. yield from 语法和委托
4. 协程的基础概念
5. 内存效率对比分析
"""

import sys
import time
import itertools
from typing import Iterator, Generator, Iterable
from collections.🎯 今天的核心概念
生成器和迭代器的精髓：

惰性计算 - 需要时才计算，不是一次性计算所有
内存高效 - 生成器比列表节省几千倍内存
无限序列 - 可以生成无限长的数据流
管道模式 - 链式组合多个生成器实现复杂处理

💡 关键理解点：

迭代器协议：__iter__ + __next__ = 可迭代
yield 关键字：暂停函数执行，保存状态
yield from：优雅地委托给另一个生成器
生成器表达式：内存友好的列表推导式

🚀 现在运行代码并观察：

内存使用对比 - 看生成器如何节省内存
执行过程 - 理解生成器的"懒惰"特性
管道模式 - 体验数据流式处理的威力

🎯 重点关注
实际应用价值：

大文件处理 - 不会因为文件太大而内存溢出
数据流处理 - 实时处理无限数据流
性能优化 - 减少内存使用，提高程序效率

💡 学习建议
运行完代码后，特别注意：

生成器如何逐步执行而不是一次性生成所有数据
内存使用量的巨大差异
yield from 如何简化嵌套生成器

准备好体验生成器的强大威力了吗？运行代码，感受内存高效编程的魅力！ 🌟
这是成为 Python 高手必须掌握的核心技能！