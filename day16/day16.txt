Day 16：原型模式 + 结构型模式入门🎯 今日学习目标

掌握原型模式（Prototype）
学习适配器模式（Adapter）
理解装饰器模式（Decorator Pattern）
掌握代理模式（Proxy）

一、原型模式（Prototype）💡 核心思想
通过克隆现有对象来创建新对象，而不是通过 __init__ 初始化使用场景：

对象创建成本高（数据库查询、网络请求）
需要大量相似对象
保存对象的快照

二、适配器模式（Adapter）💡 核心思想
让不兼容的接口能够一起工作就像：

🔌 电源转换插头（中国插座 → 美国插头）
🎧 耳机转接头（Type-C → 3.5mm）

三、装饰器模式（Decorator Pattern）💡 核心思想
动态地给对象添加新功能，不改变原有代码⚠️ 注意：这是设计模式中的装饰器，和 Python 的 @decorator 不是同一个概念！

四、代理模式（Proxy）💡 核心思想
为对象提供一个代理，控制对原对象的访问常见类型：

🔒 保护代理（权限控制）
💾 虚拟代理（懒加载）
🌐 远程代理（RPC）
📝 日志代理
